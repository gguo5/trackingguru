/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gguo.trackingguru;

import com.gguo.util.Utilities;
import java.io.File;
import java.util.Properties;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;

/**
 *
 * @author Grant
 */
public class ImportTracking extends javax.swing.JFrame {

    /**
     * Creates new form ImportTracking
     */
    
    private Tracking mainTracking;
    public ImportTracking() {
        initComponents();
    }
    
    public ImportTracking(Tracking mainTrack) {
        initComponents();
        this.mainTracking = mainTrack;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fc_import = new javax.swing.JFileChooser();
        fc_import.setCurrentDirectory(ComponentControls.getRootFile());
        open_import_btn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        notification = new javax.swing.JLabel();

        fc_import.setFileFilter(new TextFileFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        open_import_btn.setText("Open");
        open_import_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_import_btnActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose file to import:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(notification, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(open_import_btn)))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(open_import_btn)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(notification, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-308)/2, (screenSize.height-195)/2, 308, 195);
    }// </editor-fold>//GEN-END:initComponents

    private void open_import_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_import_btnActionPerformed
        int returnVal = fc_import.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc_import.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            String content = Utilities.readFileToString(file);
            String[] tns = content.split(",|\\s+");
            for (int i = 0; i < tns.length; i++) {
                String tn = tns[i];
                tns[i] = tn.trim();
            }
            
            Properties prop = new Properties();
            for (String tn: tns){
            prop.setProperty(tn, "");
            }
            Utilities.WriteToPropFile(prop, file.getAbsolutePath().replace("txt", "properties"));
            notification.setText("import successful!");
            String tabNameSubStr = file.getName().substring(0, file.getName().indexOf("."));
            DefaultListModel newListModel = ComponentControls.setJListModel(tabNameSubStr);
            this.mainTracking.getTracking_list(tabNameSubStr).setModel(newListModel);
            this.mainTracking.updateTrackingListModel(tabNameSubStr, newListModel);
            
            


        } else {
           notification.setText("import unsuccessful!");
        }
    }//GEN-LAST:event_open_import_btnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fc_import;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel notification;
    private javax.swing.JButton open_import_btn;
    // End of variables declaration//GEN-END:variables

    class TextFileFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".txt");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Text documents (*.txt)";
        }
    }
}
