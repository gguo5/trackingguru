/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gguo.trackingguru;

import com.gguo.util.Utilities;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import org.apache.log4j.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author gguo
 */
public class Tracking extends javax.swing.JFrame {

    final static Logger logger = Logger.getLogger(Tracking.class.getName());

    /**
     * Creates new form Tracking
     */
    public Tracking() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        status_label = new javax.swing.JLabel();
        trackingTabs = new javax.swing.JTabbedPane();
        jpanel_bs = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tracking_table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tf_tracking_number = new javax.swing.JTextArea();
        btn_search = new javax.swing.JButton();
        btn_edit_receiver = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tracking_list = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        btn_addNew = new javax.swing.JButton();
        btn_track = new javax.swing.JButton();
        jpanel_efs = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tracking_table_efs = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tf_tracking_number_efs = new javax.swing.JTextArea();
        btn_search_efs = new javax.swing.JButton();
        btn_track_efs = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btn_edit_receiver1 = new javax.swing.JButton();
        btn_addNew_efs = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tracking_list_efs = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mi_exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mi_api_setting = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tracking Guru");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(status_label, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(status_label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        trackingTabs.setName(""); // NOI18N

        jpanel_bs.setName("BlueSky"); // NOI18N

        tracking_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tracking_table.getTableHeader().setReorderingAllowed(false);
        tracking_table.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tracking_tableMouseMoved(evt);
            }
        });
        tracking_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tracking_tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tracking_table);

        jLabel1.setText("Tracking Numbers");

        tf_tracking_number.setColumns(20);
        tf_tracking_number.setLineWrap(true);
        tf_tracking_number.setRows(5);
        tf_tracking_number.setText(Utilities.setJTextAreaText(jpanel_bs.getName()));
        tf_tracking_number.setToolTipText("Tracking numbers can be separated by either space or comma.");
        tf_tracking_number.setWrapStyleWord(true);
        jScrollPane1.setViewportView(tf_tracking_number);

        btn_search.setText("Search");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        btn_edit_receiver.setText("Manage");
        btn_edit_receiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_edit_receiverActionPerformed(evt);
            }
        });

        tracking_listModel= ComponentControls.setJListModel(jpanel_bs.getName());
        tracking_list.setModel(tracking_listModel);
        tracking_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                tracking_listValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(tracking_list);

        jButton1.setText("X");

        btn_addNew.setText("+");
        btn_addNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addNewActionPerformed(evt);
            }
        });

        btn_track.setText("Track");
        btn_track.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_trackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpanel_bsLayout = new javax.swing.GroupLayout(jpanel_bs);
        jpanel_bs.setLayout(jpanel_bsLayout);
        jpanel_bsLayout.setHorizontalGroup(
            jpanel_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel_bsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanel_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpanel_bsLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jpanel_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btn_edit_receiver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpanel_bsLayout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_addNew))
                            .addComponent(btn_track, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(123, 123, 123)
                        .addGroup(jpanel_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_search, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(260, Short.MAX_VALUE))
        );
        jpanel_bsLayout.setVerticalGroup(
            jpanel_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanel_bsLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jpanel_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpanel_bsLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(jpanel_bsLayout.createSequentialGroup()
                        .addGroup(jpanel_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jpanel_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btn_search)
                                .addComponent(btn_track)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpanel_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpanel_bsLayout.createSequentialGroup()
                                .addComponent(btn_edit_receiver)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpanel_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1)
                                    .addComponent(btn_addNew)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        trackingTabs.addTab("BlueSky", jpanel_bs);

        jpanel_efs.setName("EFS"); // NOI18N

        tracking_table_efs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tracking_table_efs.getTableHeader().setReorderingAllowed(false);
        tracking_table_efs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tracking_table_efsMouseClicked(evt);
            }
        });
        tracking_table_efs.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tracking_table_efsMouseMoved(evt);
            }
        });
        jScrollPane3.setViewportView(tracking_table_efs);

        jLabel2.setText("Tracking Number");

        tf_tracking_number_efs.setColumns(20);
        tf_tracking_number_efs.setLineWrap(true);
        tf_tracking_number_efs.setRows(5);
        tf_tracking_number_efs.setText(Utilities.setJTextAreaText(jpanel_efs.getName()));
        tf_tracking_number_efs.setToolTipText("Tracking numbers can be separated by either space or comma.");
        tf_tracking_number_efs.setWrapStyleWord(true);
        jScrollPane4.setViewportView(tf_tracking_number_efs);

        btn_search_efs.setText("Search");
        btn_search_efs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_search_efsActionPerformed(evt);
            }
        });

        btn_track_efs.setText("Track");
        btn_track_efs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_track_efsActionPerformed(evt);
            }
        });

        jButton2.setText("X");

        btn_edit_receiver1.setText("Manage");
        btn_edit_receiver1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_edit_receiver1ActionPerformed(evt);
            }
        });

        btn_addNew_efs.setText("+");
        btn_addNew_efs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addNew_efsActionPerformed(evt);
            }
        });

        tracking_listModel_efs= ComponentControls.setJListModel(jpanel_efs.getName());
        tracking_list_efs.setModel(tracking_listModel_efs);
        tracking_list_efs.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                tracking_list_efsValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(tracking_list_efs);

        javax.swing.GroupLayout jpanel_efsLayout = new javax.swing.GroupLayout(jpanel_efs);
        jpanel_efs.setLayout(jpanel_efsLayout);
        jpanel_efsLayout.setHorizontalGroup(
            jpanel_efsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel_efsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanel_efsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanel_efsLayout.createSequentialGroup()
                        .addGap(258, 258, 258)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpanel_efsLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jpanel_efsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btn_edit_receiver1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpanel_efsLayout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_addNew_efs))
                            .addComponent(btn_track_efs, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btn_search_efs)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpanel_efsLayout.setVerticalGroup(
            jpanel_efsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanel_efsLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jpanel_efsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanel_efsLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel2)
                        .addGap(112, 112, 112))
                    .addGroup(jpanel_efsLayout.createSequentialGroup()
                        .addGroup(jpanel_efsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jpanel_efsLayout.createSequentialGroup()
                                .addGroup(jpanel_efsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jpanel_efsLayout.createSequentialGroup()
                                        .addComponent(btn_track_efs)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_edit_receiver1))
                                    .addGroup(jpanel_efsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btn_search_efs)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpanel_efsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton2)
                                    .addComponent(btn_addNew_efs))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        trackingTabs.addTab("EFS", jpanel_efs);

        jMenu1.setMnemonic('F');
        jMenu1.setText("File");

        mi_exit.setMnemonic('X');
        mi_exit.setText("Exit");
        mi_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_exitActionPerformed(evt);
            }
        });
        jMenu1.add(mi_exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('S');
        jMenu2.setText("Settings");

        mi_api_setting.setMnemonic('A');
        mi_api_setting.setText("API Setting");
        mi_api_setting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_api_settingActionPerformed(evt);
            }
        });
        jMenu2.add(mi_api_setting);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(trackingTabs, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(trackingTabs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        trackingTabs.getAccessibleContext().setAccessibleName("");

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-713)/2, (screenSize.height-604)/2, 713, 604);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed

        // TODO add your handling code here:
        String url = "http://track.blueskyexpress.com.au/cgi-bin/GInfo.dll?EmmisTrack";
        //String url = "http://nz.efspost.net/cgi-bin/GInfo.dll?EmmisTrack";
        String w = "blueskyexpress";
        //String w = "nzefs";
        String cmodel = "";
        //String cno = tf_tracking_number.getText();
        int ntype = 0;
        String tracking_no_input = tf_tracking_number.getText();
        String cleanedTracking = "";
        String errorTracking = "";
        boolean processFlag = false;
        boolean singleNoFlag = false;
        if (tracking_no_input.length() > 0) {
            String[] result = validateTracking(tracking_no_input);
            cleanedTracking = result[1];
            processFlag = Boolean.valueOf(result[0]);
            singleNoFlag = Boolean.valueOf(result[3]);
            errorTracking = result[2];
        }

        if (processFlag) {//Utilities.fileExist(APIConfigFilePath)) {
            //save tn only when valid tracking no(s)
            if (singleNoFlag) {
                Utilities.saveJTextAreaToFile(cleanedTracking.substring(0, cleanedTracking.indexOf(" ")), jpanel_bs.getName());
            } else {
                Utilities.saveJTextAreaToFile(cleanedTracking, jpanel_bs.getName());
            }

            //process http post
            CloseableHttpClient httpclient = HttpClients.createDefault();
            try {
                HttpPost httpPost = new HttpPost(url);

                List<NameValuePair> nvps = new ArrayList<NameValuePair>();
                nvps.add(new BasicNameValuePair("w", w));
                nvps.add(new BasicNameValuePair("cmodel", cmodel));
                nvps.add(new BasicNameValuePair("cno", cleanedTracking));
                nvps.add(new BasicNameValuePair("ntype", String.valueOf(ntype)));

                httpPost.setEntity(new UrlEncodedFormEntity(nvps));

                // Create a custom response handler
                ResponseHandler<String> responseHandler = new ResponseHandler<String>() {
                    public String handleResponse(
                            final HttpResponse response) throws ClientProtocolException, IOException {
                        int status = response.getStatusLine().getStatusCode();
                        status_label.setText(response.getStatusLine().toString());
                        if (status >= 200 && status < 300) {
                            HttpEntity entity = response.getEntity();
                            return entity != null ? EntityUtils.toString(entity) : null;
                        } else {
                            throw new ClientProtocolException("Unexpected response status: " + status);
                        }
                    }
                };
                String responseBody = httpclient.execute(httpPost, responseHandler);
                //System.out.println("----------------------------------------");
                //System.out.println(responseBody);

                //tp_result.setText(responseBody);
                Document htmlDoc = Jsoup.parse(responseBody);
//                tracking_number.setText(htmlDoc.getElementById("HeaderNum").text());
//                tracking_status.setText(htmlDoc.getElementById("HeaderState").text());
//                tracking_from.setText(htmlDoc.getElementById("HeaderFrom").text());
//                tracking_to.setText(htmlDoc.getElementById("HeaderDes").text());
//                tracking_quantity.setText(htmlDoc.getElementById("HeaderItem").text());

                Element tableElement = htmlDoc.getElementById("oMHtable");

                Vector<String> tableHeaders = new Vector<String>();
                Vector tableData = new Vector();

                for (Element header : tableElement.select("tr:eq(0)")) {
                    Elements tds = header.select("td:not([rowspan])");//tds without attr=rowspan
                    for (Element td : tds) {
                        //System.out.println("header"+td.text());
                        tableHeaders.add(td.text());
                    }
                }

                for (Element row : tableElement.select("tr:gt(0)")) {
                    Elements tds = row.select("td:not([rowspan])");//tds without attr=rowspan
                    Vector<Object> oneRow = new Vector<Object>();
                    for (Element td : tds) {
                        //System.out.println(td.text());
                        oneRow.add(td.text());
                    }
                    tableData.add(oneRow);
                }
                //create a table model and set cell non-edible
                DefaultTableModel tableModel = new DefaultTableModel(tableData, tableHeaders) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        //all cells false
                        return false;
                    }
                };
                tracking_table.setModel(tableModel);

                //set column width
                int[] width = {100, 65, 35, 25, 35, 100, 110, 50};
                for (int i = 0; i < tracking_table.getColumnCount(); i++) {
                    tracking_table.getColumnModel().getColumn(i).setPreferredWidth(width[i]);
                }
                //set table header centre horizontally
                TableCellRenderer rendererFromHeader = tracking_table.getTableHeader().getDefaultRenderer();
                JLabel headerLabel = (JLabel) rendererFromHeader;
                headerLabel.setHorizontalAlignment(JLabel.CENTER);

                //set tn column style
                tracking_table.getColumn(tracking_table.getColumnName(0)).setCellRenderer(new DefaultTableCellRenderer() {
                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                        setText(value.toString());
                        setForeground(Color.BLUE);
                        setToolTipText(value.toString());
                        return this;
                    }
                });

                tracking_table.getColumn(tracking_table.getColumnName(7)).setCellRenderer(new DefaultTableCellRenderer() {
                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                        setText(value.toString());
                        setForeground(Color.BLUE);
                        return this;
                    }
                });

                //            CloseableHttpResponse response2 = httpclient.execute(httpPost);
                //            try {
                //                System.out.println(response2.getStatusLine());
                //
                //                HttpEntity entity2 = response2.getEntity();
                //                // do something useful with the response body
                //                // and ensure it is fully consumed
                //                  tp_result.setText(EntityUtils.toString(entity2));
                //                  EntityUtils.consume(entity2);
                //            } catch (IOException ex) {
                //                Logger.getLogger(Tracking.class.getName()).log(Level.SEVERE, null, ex);
                //            } finally {
                //                try {
                //                    response2.close();
                //                } catch (IOException ex) {
                //                    Logger.getLogger(Tracking.class.getName()).log(Level.SEVERE, null, ex);
                //                }
                //            }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Can not connect to host, try again later.");
                logger.error("IOException", ex);
            } finally {
                try {
                    httpclient.close();
                } catch (IOException ex) {
                    logger.error("IOException", ex);
                }
            }
        } else {
            //new APISettingFrame().setVisible(true);
            //do sth if not true
            String str = "";
            if (errorTracking.length() > 0) {
                str = "Invalid tracking no(s): " + errorTracking;
            } else {
                str = "Tracking No can't be empty!";
            }
            JOptionPane.showMessageDialog(null, str);
        }
    }//GEN-LAST:event_btn_searchActionPerformed

    private void mi_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_mi_exitActionPerformed

    private void tracking_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tracking_tableMouseClicked
        // TODO add your handling code here:
        JTable target = (JTable) evt.getSource();
        int row = target.getSelectedRow();
        int column = target.getSelectedColumn();
        if (column == 0 || column == 7) {
            String t_no = (String) target.getValueAt(row, 0);
            String base_url = "http://198.11.173.181/cgi-bin/GInfo.dll?EmmisTrack&w=blueskyexpress&cno=ReplaceMe&cmodel=&ntype=0";
            String url = base_url.replace("ReplaceMe", t_no);
            logger.info("Open chrome window: " + url);

            Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
            if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(url));
                } catch (Exception e) {
                    logger.error("Exception", e);
                }
            }

        }
        //System.out.println("row: "+row +" col: "+column);

    }//GEN-LAST:event_tracking_tableMouseClicked

    private void tracking_tableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tracking_tableMouseMoved
        // TODO add your handling code here:
        JTable target = (JTable) evt.getSource();
        int row = target.rowAtPoint(evt.getPoint());
        int column = target.columnAtPoint(evt.getPoint());
        if (column == 0 || column == 7) {
            target.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        } else {
            target.setCursor(Cursor.getDefaultCursor());
        }
        //System.out.println("row: "+row +" col: "+column);
    }//GEN-LAST:event_tracking_tableMouseMoved

    private void mi_api_settingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_api_settingActionPerformed
        // TODO add your handling code here:
        new APISettingFrame(this).setVisible(true);
    }//GEN-LAST:event_mi_api_settingActionPerformed

    private void tracking_table_efsMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tracking_table_efsMouseMoved
        // TODO add your handling code here:
        JTable target = (JTable) evt.getSource();
        int column = target.columnAtPoint(evt.getPoint());
        if (column == 0 || column == 5) {
            target.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        } else {
            target.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_tracking_table_efsMouseMoved

    private void tracking_table_efsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tracking_table_efsMouseClicked
        // TODO add your handling code here:
        JTable target = (JTable) evt.getSource();
        int row = target.getSelectedRow();
        int column = target.getSelectedColumn();
        if (column == 0 || column == 5) {
            String t_no = (String) target.getValueAt(row, 0);
            String base_url = "http://nz.efspost.net/cgi-bin/GInfo.dll?EmmisTrack&w=nzefs&cno=ReplaceMe&cmodel=&ntype=0";
            String url = base_url.replace("ReplaceMe", t_no);
            logger.info("Open chrome window: " + url);

            Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
            if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(url));
                } catch (Exception e) {
                    logger.error("Exception", e);
                }
            }

        }
    }//GEN-LAST:event_tracking_table_efsMouseClicked

    private void btn_search_efsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_search_efsActionPerformed
        // TODO add your handling code here:
        //String url = "http://track.blueskyexpress.com.au/cgi-bin/GInfo.dll?EmmisTrack";
        String url = "http://nz.efspost.net/cgi-bin/GInfo.dll?EmmisTrack";
        //String w = "blueskyexpress";
        String w = "nzefs";
        String cmodel = "";
        //String cno = tf_tracking_number.getText();
        int ntype = 0;
        String tracking_no_input = tf_tracking_number_efs.getText();
        String cleanedTracking = "";
        String errorTracking = "";
        boolean processFlag = false;
        boolean singleNoFlag = false;
        if (tracking_no_input.length() > 0) {
            String[] result = validateTracking(tracking_no_input);
            cleanedTracking = result[1];
            processFlag = Boolean.valueOf(result[0]);
            singleNoFlag = Boolean.valueOf(result[3]);
            errorTracking = result[2];
        }

        if (processFlag) {//Utilities.fileExist(APIConfigFilePath)) {
            //save tn only when valid tracking no(s)
            if (singleNoFlag) {
                Utilities.saveJTextAreaToFile(cleanedTracking.substring(0, cleanedTracking.indexOf(" ")), jpanel_efs.getName());
            } else {
                Utilities.saveJTextAreaToFile(cleanedTracking, jpanel_efs.getName());
            }

            //process http post
            CloseableHttpClient httpclient = HttpClients.createDefault();
            try {
                HttpPost httpPost = new HttpPost(url);

                List<NameValuePair> nvps = new ArrayList<NameValuePair>();
                nvps.add(new BasicNameValuePair("w", w));
                nvps.add(new BasicNameValuePair("cmodel", cmodel));
                nvps.add(new BasicNameValuePair("cno", cleanedTracking));
                nvps.add(new BasicNameValuePair("ntype", String.valueOf(ntype)));

                httpPost.setEntity(new UrlEncodedFormEntity(nvps));

                // Create a custom response handler
                ResponseHandler<String> responseHandler = new ResponseHandler<String>() {
                    public String handleResponse(
                            final HttpResponse response) throws ClientProtocolException, IOException {
                        int status = response.getStatusLine().getStatusCode();
                        status_label.setText(response.getStatusLine().toString());
                        if (status >= 200 && status < 300) {
                            HttpEntity entity = response.getEntity();
                            return entity != null ? EntityUtils.toString(entity) : null;
                        } else {
                            throw new ClientProtocolException("Unexpected response status: " + status);
                        }
                    }
                };
                String responseBody = httpclient.execute(httpPost, responseHandler);
                //System.out.println("----------------------------------------");
                //System.out.println(responseBody);

                //tp_result.setText(responseBody);
                Document htmlDoc = Jsoup.parse(responseBody);
//                tracking_number.setText(htmlDoc.getElementById("HeaderNum").text());
//                tracking_status.setText(htmlDoc.getElementById("HeaderState").text());
//                tracking_from.setText(htmlDoc.getElementById("HeaderFrom").text());
//                tracking_to.setText(htmlDoc.getElementById("HeaderDes").text());
//                tracking_quantity.setText(htmlDoc.getElementById("HeaderItem").text());

                Element tableElement = htmlDoc.getElementById("oMHtable");

                Vector<String> tableHeaders = new Vector<String>();
                Vector tableData = new Vector();

                for (Element header : tableElement.select("tr:eq(0)")) {
                    Elements tds = header.select("td:not([rowspan])");//tds without attr=rowspan
                    for (Element td : tds) {
                        //System.out.println("header"+td.text());
                        tableHeaders.add(td.text());
                    }
                }

                for (Element row : tableElement.select("tr:gt(0)")) {
                    Elements tds = row.select("td:not([rowspan])");//tds without attr=rowspan
                    Vector<Object> oneRow = new Vector<Object>();
                    for (Element td : tds) {
                        //System.out.println(td.text());
                        oneRow.add(td.text());
                    }
                    tableData.add(oneRow);
                }
                //create a table model and set cell non-edible
                DefaultTableModel tableModel = new DefaultTableModel(tableData, tableHeaders) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        //all cells false
                        return false;
                    }
                };
                tracking_table_efs.setModel(tableModel);

                //set column width
                int[] width = {100, 65, 35, 25, 35, 50};
                for (int i = 0; i < tracking_table_efs.getColumnCount(); i++) {
                    tracking_table_efs.getColumnModel().getColumn(i).setPreferredWidth(width[i]);
                }
                //set table header centre horizontally
                TableCellRenderer rendererFromHeader = tracking_table_efs.getTableHeader().getDefaultRenderer();
                JLabel headerLabel = (JLabel) rendererFromHeader;
                headerLabel.setHorizontalAlignment(JLabel.CENTER);

                //set tn column style
                tracking_table_efs.getColumn(tracking_table_efs.getColumnName(0)).setCellRenderer(new DefaultTableCellRenderer() {
                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                        setText(value.toString());
                        setForeground(Color.BLUE);

                        return this;
                    }
                });

                tracking_table_efs.getColumn(tracking_table_efs.getColumnName(5)).setCellRenderer(new DefaultTableCellRenderer() {
                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                        setText(value.toString());
                        setForeground(Color.BLUE);
                        return this;
                    }
                });


            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Can not connect to host, try again later.");
                logger.error("IOException", ex);
            } finally {
                try {
                    httpclient.close();
                } catch (IOException ex) {
                    logger.error("IOException", ex);
                }
            }
        } else {
            //new APISettingFrame().setVisible(true);
            //do sth if not true
            String str = "";
            if (errorTracking.length() > 0) {
                str = "Invalid tracking no(s): " + errorTracking;
            } else {
                str = "Tracking No can't be empty!";
            }
            JOptionPane.showMessageDialog(null, str);
        }
    }//GEN-LAST:event_btn_search_efsActionPerformed

    private void btn_edit_receiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_edit_receiverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_edit_receiverActionPerformed

    private void tracking_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_tracking_listValueChanged
        // TODO add your handling code here:
//        JList target = (JList) evt.getSource();
//        if(target.getModel().getSize()>0){
//        btn_search.setEnabled(true);
//        }else{btn_search.setEnabled(false);}
    }//GEN-LAST:event_tracking_listValueChanged

    private void btn_trackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_trackActionPerformed
        // TODO add your handling code here:
        if (checkTrackingListEmpty()) {
            //add tracking number to start
            logger.info("list empty");
            new AddTracking(this).setVisible(true);

        } else {
            logger.info("list not empty");
        }
    }//GEN-LAST:event_btn_trackActionPerformed

    private void btn_addNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addNewActionPerformed
        // TODO add your handling code here:
        new AddTracking(this).setVisible(true);
    }//GEN-LAST:event_btn_addNewActionPerformed

    private void btn_track_efsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_track_efsActionPerformed
        // TODO add your handling code here:
         if (checkTrackingListEmpty()) {
            //add tracking number to start
            logger.info("list empty");
            new AddTracking(this).setVisible(true);

        } else {
            logger.info("list not empty");
        }
    }//GEN-LAST:event_btn_track_efsActionPerformed

    private void btn_edit_receiver1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_edit_receiver1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_edit_receiver1ActionPerformed

    private void btn_addNew_efsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addNew_efsActionPerformed
        // TODO add your handling code here:
          new AddTracking(this).setVisible(true);
    }//GEN-LAST:event_btn_addNew_efsActionPerformed

    private void tracking_list_efsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_tracking_list_efsValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_tracking_list_efsValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tracking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tracking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tracking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tracking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tracking().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_addNew;
    private javax.swing.JButton btn_addNew_efs;
    private javax.swing.JButton btn_edit_receiver;
    private javax.swing.JButton btn_edit_receiver1;
    private javax.swing.JButton btn_search;
    private javax.swing.JButton btn_search_efs;
    private javax.swing.JButton btn_track;
    private javax.swing.JButton btn_track_efs;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPanel jpanel_bs;
    private javax.swing.JPanel jpanel_efs;
    private javax.swing.JMenuItem mi_api_setting;
    private javax.swing.JMenuItem mi_exit;
    private javax.swing.JLabel status_label;
    private javax.swing.JTextArea tf_tracking_number;
    private javax.swing.JTextArea tf_tracking_number_efs;
    private javax.swing.JTabbedPane trackingTabs;
    private javax.swing.JList tracking_list;
    private javax.swing.JList tracking_list_efs;
    private javax.swing.JTable tracking_table;
    private javax.swing.JTable tracking_table_efs;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel tracking_listModel;
    private DefaultListModel tracking_listModel_efs;

    private String[] validateTracking(String tracking_no) {
        //result[0] is the process flag
        //result[1] is the valid tracking number string
        //result[2] is the invalid tracking number string
        //result[3] is the single tn flag
        String[] result = new String[4];
        boolean process = true;
        String[] trackingNos = tracking_no.split("\\s+|,"); //regex for 1 or more spaces, or comma
        StringBuilder sb = new StringBuilder();
        StringBuilder err = new StringBuilder();
        boolean single = false;
        for (String tn : trackingNos) {
            if (tn.trim().matches("[a-zA-Z]{2}\\d{9}[a-zA-Z]{2,3}+")) {  //[a-zA-Z]{2}\\d{9}[a-zA-Z]{2,3}+    [a-zA-Z]{2}\\d{9}MEL
                sb.append(tn);
                sb.append(" ");
            } else {
                if (tn.length() > 0) {
                    process = false;
                    err.append(tn);
                    err.append(",");
                }
            }
        }

        if (sb.length() > 0) {
            if (sb.indexOf(" ") == sb.length() - 1) {
                sb.append(sb.substring(0, sb.length() - 1));
                result[1] = sb.toString();
                single = true;
            } else {
                result[1] = sb.substring(0, sb.length() - 1);
            }
        } else {
            result[1] = sb.toString();
        }
        result[0] = process ? String.valueOf(process) : String.valueOf(process);
        result[3] = single ? String.valueOf(single) : String.valueOf(single);
        if (err.length() > 0 && String.valueOf(err.charAt(err.length() - 1)).equals(",")) {
            result[2] = err.substring(0, err.length() - 1);
        } else {
            result[2] = err.toString();
        }
        return result;
    }

    public void ChildFrameTest(String in) {
        System.out.println(in);
    }

    private boolean checkTrackingListEmpty() {
        boolean empty = false;
        int count = this.getTracking_list().getModel().getSize();
        empty = count > 0 ? empty : !empty;
        return empty;
    }

    enum Logistics {
    BlueSky,EFS
    }
    
    public Logistics logi;
     
    public DefaultListModel getTracking_listModel() {
        String str = getCurrentTabName();
        logi = Logistics.valueOf(str);
        
        switch (logi) {
            case BlueSky:
                return tracking_listModel;
            case EFS:
                return tracking_listModel_efs;//change this
            default:
                return null;
        }


    }

    public JList getTracking_list() {
        String str = getCurrentTabName();
        logi = Logistics.valueOf(str);
        
        switch (logi) {
            case BlueSky:
                return tracking_list;
            case EFS:
                return tracking_list_efs;//change this
            default:
                return null;
        }
       
    }

    public String getCurrentTabName() {
        int index = trackingTabs.getSelectedIndex();
        JPanel component = (JPanel) trackingTabs.getComponent(index);
        String name = component.getName();
        return name;
    }
}
